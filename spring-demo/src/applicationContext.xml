<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 装配Bean的三种方式 -->
    <!-- 第一种方式： new 实现类-->
    <!-- Bean作用域：
            1. singleton : Bean 以单例方式存在，也就是只有一个实例；默认属性
            2. prototype ： 每次从容器中调用Bean时，都返回一个新的实例；相当于创建多个实例

            后面都不常用（不需要考虑）
            3. request
            4. session
            5. globalSession
     -->
    <bean id="user" class="demo.User" scope="singleton">
        <property name="name" value="Alex"></property>
    </bean>

    <!-- 第二种方式： 通过静态工厂方法-->
    <bean id="static_user" class="demo.CreateUserFactory" factory-method="createUser">
        <property name="name" value="SunyChu"></property>
    </bean>

    <!-- 第三种方式： 通过实例工厂方法-->
    <!-- 创建工厂实例，接着再创建Userbean -->
    <bean id="create_instance" class="demo.CreateUserFactoryInstance"></bean>
    <bean id="instance_user" factory-bean="create_instance" factory-method="createUser">
        <property name="name" value="Alex"></property>
    </bean>


    <bean id="person" class="demo.model.Person" init-method="myInit" destroy-method="myDestroy">
        <property name="name" value="Alex"></property>
        <property name="age" value="25"></property>
    </bean>

    <!--配置Bean处理器-->
    <bean id="beanProcessor" class="demo.model.MyBeanProcessor"></bean>



    <!-- 构造方法注入属性值 -->
    <bean id="stu" class="demo.model.Student">
<!--        相当于调用了 public Student(String name, int age, int score) 这个构造方法 -->
<!--        <constructor-arg name="age" value="18"></constructor-arg>-->
<!--        <constructor-arg name="name" value="Alex"></constructor-arg>-->
<!--        <constructor-arg name="score" value="100"></constructor-arg>-->

<!--        通过构造函数参数索引和类型进行赋值 -->
<!--        <constructor-arg index="0" value="Alex" type="java.lang.String"></constructor-arg>-->
<!--        <constructor-arg index="1" value="20" type="int"></constructor-arg>-->
        <property name="age" value="12"></property>
        <property name="name" value="Alex"></property>
    </bean>

<!--    通过命名控件注入-->
    <bean id="student" class="demo.model.Student" p:age="28" p:name="Sunny" p:score="750"></bean>


<!--    通过SpEL注入-->
<!--    <property name="" value="#{表达式}">
        #{123}、#{'Jack'} ： 数字、字符串
        #{beanId} ：另一个bean引用
        #{beanId.propName} : 操作数据
        #{beanId.toString()} : 执行方法
        #{T(类).字段|方法} : 静态方法或字段    -->
    <bean id="address" class="demo.model.Address">
        <property name="addressName" value="beijing"></property>
    </bean>
    <bean id="customer" class="demo.model.Customer">
        <!--<property name="name" value="#{'alex'.toUpperCase()}"></property>-->
        <property name="name" value="#{address.addressName}"></property>
        <property name="salary" value="#{T(java.lang.Math).PI * 1000}"></property>
        <!-- ref 表示引用 一个对象引用另外一个对象 两种引入方法：
            1. 使用ref ：<property name="address" ref="address"></property>
            2. 使用SpEL表达式 ：<property name="address" value="#{address}"></property>
        -->
        <!--<property name="address" ref="address"></property>-->
        <property name="address" value="#{address}"></property>
    </bean>

</beans>