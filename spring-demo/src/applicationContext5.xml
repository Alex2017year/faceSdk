<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd">

<!--    配置CustomerService  业务类-->
    <bean id="customerService" class="demo.springaop.CustomerServiceImpl"/>

<!--    切面类-->
    <bean id="myAspect" class="demo.aspectaop.CustomerServiceAspect"/>

<!--    全自动AOP配置
        1. 在bean中配置aop约束
        2. 配置aop:config内容，把切入点和通知结合
        3. proxy-target-class="true" 使用cglib代理
        4. aop:pointcut 切入点，从目标对象获取具体方法
        5. 特殊的切入面：
              advice-ref 通知
              pointcut-ref 切入点的引用
        6. expression表达式：
              * 表示任意
              execution(*     demo.springaop.*.*(..))
                      返回值     包名.类名.方法名.参数
        7. AOP 用于事务配置和日志的记录
-->
    <aop:config proxy-target-class="true">
<!--        切入点：
            expression: 表达式
            每个service的方法前面都开启事务和提交事务-->
        <aop:pointcut id="myPointcut" expression="execution(* demo.springaop.*.*(..))"/>
<!--        通知 关联 切入点-->
        <aop:advisor advice-ref="myAspect" pointcut-ref="myPointcut"/>
    </aop:config>

</beans>